{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-10-16T14:08:29.225Z",
    "end": "2025-10-16T14:08:45.428Z",
    "duration": 16203,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "506b4983-c8e7-4be2-a1c9-820a97205762",
      "title": "",
      "fullFile": "C:\\Files\\VScodeHTMLcssJavaScriptPROJECTS\\eCommerce_JS\\test\\smokeTests.js",
      "file": "\\test\\smokeTests.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "46a6ce21-a694-45a3-a22b-15fdda9b8cb3",
          "title": "Smoke tests",
          "fullFile": "C:\\Files\\VScodeHTMLcssJavaScriptPROJECTS\\eCommerce_JS\\test\\smokeTests.js",
          "file": "\\test\\smokeTests.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Smoke tests\"",
              "fullTitle": "Smoke tests \"before each\" hook in \"Smoke tests\"",
              "timedOut": false,
              "duration": 969,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(19000);\nlet options = new chrome.Options();\noptions.addArguments(\"--incognito\");\nif (process.env.HEADLESS === \"true\") {\n    options.addArguments(\"--headless=new\");\n    options.addArguments(\"--disable-gpu\");\n    options.addArguments(\"--window-size=1920,1080\");\n    options.addArguments(\"--no-sandbox\");\n    options.addArguments(\"--disable-dev-shm-usage\");\n}\ndriver = await new Builder()\n    .forBrowser(\"chrome\")\n    .setChromeOptions(options)\n    .build();\nloginPage = new LoginPage(driver);",
              "err": {},
              "uuid": "181b39f8-8750-4db6-8163-26634a27ba28",
              "parentUUID": "46a6ce21-a694-45a3-a22b-15fdda9b8cb3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Smoke tests\"",
              "fullTitle": "Smoke tests \"after each\" hook in \"Smoke tests\"",
              "timedOut": false,
              "duration": 204,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nif (driver) {\n    await driver.quit();\n}",
              "err": {},
              "uuid": "9458f30f-e629-4f21-bd7f-c4618595d34b",
              "parentUUID": "46a6ce21-a694-45a3-a22b-15fdda9b8cb3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "TC-001: Successful login with valid credentials",
              "fullTitle": "Smoke tests TC-001: Successful login with valid credentials",
              "timedOut": false,
              "duration": 1473,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await loginPage.login(TestData.users.standard.username, TestData.users.standard.password);\n    const inventoryPage = new InventoryPage(driver);\n    assert.strictEqual(await driver.getCurrentUrl(), TestData.expected.inventoryPageUrl, \"user was not redirected to the inventory page\");\n    assert.strictEqual(await inventoryPage.getInventoryHeader(), TestData.expected.inventoryHeading, \"the inventory header is not 'Products'\");\n} catch (error) {\n    console.error(\"Test failed:\", error);\n}",
              "err": {},
              "uuid": "bd0223fb-afe9-4fbb-a796-d424fefe653c",
              "parentUUID": "46a6ce21-a694-45a3-a22b-15fdda9b8cb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-002: Unsuccessful login with locked user",
              "fullTitle": "Smoke tests TC-002: Unsuccessful login with locked user",
              "timedOut": false,
              "duration": 1224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const actualErrMsgForLockedU = await loginPage.loginWithInvalidCredentials(TestData.users.locked.username, TestData.users.locked.password);\n    assert.strictEqual(actualErrMsgForLockedU, TestData.errors.lockedUserError, \"The error message is not the same as specified in the requirements\")\n} catch (error) {\n    console.log(\"The error happened - \", error);\n}",
              "err": {},
              "uuid": "033c08b3-1cae-4c92-bea8-3037bb382f60",
              "parentUUID": "46a6ce21-a694-45a3-a22b-15fdda9b8cb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-003: Check presence of product list after login",
              "fullTitle": "Smoke tests TC-003: Check presence of product list after login",
              "timedOut": false,
              "duration": 1780,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await loginPage.login(TestData.users.standard.username, TestData.users.standard.password);\n    const inventoryPage = new InventoryPage(driver);\n    assert.strictEqual(await inventoryPage.hasMultipleProducts(), true, \"PLP contains not more than 1 product\");\n    assert.strictEqual(await inventoryPage.allProductsHaveNameAndPrice(), true, \"some product doesn't contain name and price\");\n} catch (error) {\n    console.log(\"the error is -\", error)\n}",
              "err": {},
              "uuid": "5b258a3e-43e0-4ecb-aab8-e05886315144",
              "parentUUID": "46a6ce21-a694-45a3-a22b-15fdda9b8cb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-004: Logout from application",
              "fullTitle": "Smoke tests TC-004: Logout from application",
              "timedOut": false,
              "duration": 2451,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await loginPage.login(TestData.users.standard.username, TestData.users.standard.password);\n    const inventoryPage = new InventoryPage(driver);\n    await inventoryPage.logOut();\n    assert.strictEqual(await driver.getCurrentUrl(), TestData.baseUrl, \"redirection to home page after LogOut is not happened\")\n    // await driver.sleep(50)\n} catch (error) {\n    console.log(\"error = \", error);\n}",
              "err": {},
              "uuid": "52ceca75-3219-4bd1-922c-0e34efb497e5",
              "parentUUID": "46a6ce21-a694-45a3-a22b-15fdda9b8cb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC-005: Add item to cart and check badge",
              "fullTitle": "Smoke tests TC-005: Add item to cart and check badge",
              "timedOut": false,
              "duration": 1606,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await loginPage.login(TestData.users.standard.username, TestData.users.standard.password);\n    const inventoryPage = new InventoryPage(driver);\n    await inventoryPage.addOneItemToCart();\n    assert.strictEqual(await inventoryPage.isCartEmpty(), false, \"Cart is empty and the product is not added to cart\")\n} catch (error) {\n    console.log(\"error is - \", error);\n}",
              "err": {},
              "uuid": "0309a821-dcdb-4b02-b6df-b8cce92cdb79",
              "parentUUID": "46a6ce21-a694-45a3-a22b-15fdda9b8cb3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bd0223fb-afe9-4fbb-a796-d424fefe653c",
            "033c08b3-1cae-4c92-bea8-3037bb382f60",
            "5b258a3e-43e0-4ecb-aab8-e05886315144",
            "52ceca75-3219-4bd1-922c-0e34efb497e5",
            "0309a821-dcdb-4b02-b6df-b8cce92cdb79"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8534,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.4"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}